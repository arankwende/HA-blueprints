blueprint:
  name: Moes Knob for 2 Zigbee Curtains
  description: Use your Moes knob to control two simultaneous zigbee curtains
  domain: automation
  input:
    remote:
      name: Remote
      description: Moes rotary controller to use
      selector:
        device:
          integration: zha
          manufacturer: _TZ3000_4fjiwweb
          model: TS004F
          multiple: false
    curtain1:
      name: Cover
      description: The first curtain which will be controlled with this automation.
      selector:
        entity:
          domain: cover
          multiple: false
    curtain2:
      name: Cover
      description: The second curtain which will be controlled with this automation.
      selector:
        entity:
          domain: cover
          multiple: false
    custom_stepsize:
      name: Step Size
      description: Percentage that the curtain will move each step
      default: 5
      selector:
        number:
          min: 1.0
          max: 100.0
          step: 5.0
          unit_of_measurement: '%'
          mode: slider
    single_press:
      name: Single press
      description: Toggle (default) or Scene on single press
      default: Toggle
      selector:
        select:
          options:
          - Toggle
          - Scene
          multiple: false
          custom_value: false
  source_url: https://github.com/arankwende/HA-blueprints/blob/main/moes_curtain_controller.yaml
mode: queued
max: 10
max_exceeded: silent

trigger:
- platform: event
  event_type: zha_event
  event_data:
    device_id: !input remote
action:
- variables:
    command: '{{ trigger.event.data.command }}'
    cluster_id: '{{ trigger.event.data.cluster_id }}'
    endpoint_id: '{{ trigger.event.data.endpoint_id }}'
    mode: '{% if command != ''toggle'' %} {{ trigger.event.data.args[0] }} {% endif
      %}'
    curtain_1: !input curtain1
    curtain_2: !input curtain2
    stepsize: !input custom_stepsize

- choose:
  - conditions:
    - conditions:
        - '{{ cluster_id == 6 }}'
        - '{{ endpoint_id == 1 }}'
        - '{{ command == ''toggle'' }}'
        - '{{ single_mode == ''Toggle'' }}'
      sequence:
        - service: cover.toggle
          entity_id: !input curtain1
        - service: cover.toggle
          entity_id: !input curtain2

    - conditions:
      - '{{ command == ''rotate_type'' }}'
      - '{{ cluster_id == 6 }}'
      - '{{ endpoint_id == 1 }}'
      - '{{ mode == 0 }}'
      sequence:
        - service: cover.set_cover_position
          data:
              position: >
                {{ [[state_attr(curtain_1,
                "current_position") - stepsize, 0] | max, 100] | min }}   
          entity_id: !input curtain1
        - service: cover.set_cover_position
          data:
              position: >
                {{ [[state_attr(curtain_2,
                "current_position") - stepsize, 0] | max, 100] | min }}   
          entity_id: !input curtain2
    - conditions:
      - '{{ cluster_id == 6 }}'
      - '{{ endpoint_id == 1 }}'
      - '{{ command == ''right'' }}'
      sequence:
        - service: cover.set_cover_position
          data:
              position: >
                {{ [[state_attr(curtain_1,
                "current_position") - stepsize, 0] | max, 100] | min }}   
          entity_id: !input curtain1
        - service: cover.set_cover_position
          data:
              position: >
                {{ [[state_attr(curtain_2,
                "current_position") - stepsize, 0] | max, 100] | min }}   
          entity_id: !input curtain2
    - conditions:
      - '{{ cluster_id == 8 }}'
      - '{{ endpoint_id == 1 }}'
      - '{{ command == ''step'' }}'
      - '{{ mode == ''StepMode.Up'' }}'
      sequence:
        - service: cover.set_cover_position
          data:
              position: >
                {{ [[state_attr(curtain_1,
                "current_position") - stepsize, 0] | max, 100] | min }}   
          entity_id: !input curtain1
        - service: cover.set_cover_position
          data:
              position: >
                {{ [[state_attr(curtain_2,
                "current_position") - stepsize, 0] | max, 100] | min }}   
          entity_id: !input curtain2
    - conditions:
      - '{{ command == ''rotate_type'' }}'
      - '{{ cluster_id == 6 }}'
      - '{{ endpoint_id == 1 }}'
      - '{{ mode == 1 }}'  
      sequence:
        - service: cover.set_cover_position
          data:
              position: >
                {{ [[state_attr(curtain_1,
                "current_position") + stepsize, 0] | max, 100] | min }}   
          entity_id: !input curtain1
        - service: cover.set_cover_position
          data:
              position: >
                {{ [[state_attr(curtain_2,
                "current_position") + stepsize, 0] | max, 100] | min }}   
          entity_id: !input curtain2
    - conditions:
      - '{{ cluster_id == 6 }}'
      - '{{ endpoint_id == 1 }}'
      - '{{ command == ''left'' }}'
      sequence:
        - service: cover.set_cover_position
          data:
              position: >
                {{ [[state_attr(curtain_1,
                "current_position") + stepsize, 0] | max, 100] | min }}   
          entity_id: !input curtain1
        - service: cover.set_cover_position
          data:
              position: >
                {{ [[state_attr(curtain_2,
                "current_position") + stepsize, 0] | max, 100] | min }}   
          entity_id: !input curtain2
    - conditions:
      - '{{ cluster_id == 8 }}'
      - '{{ endpoint_id == 1 }}'
      - '{{ command == ''step'' }}'
      - '{{ mode == ''StepMode.Down'' }}'
      sequence:
        - service: cover.set_cover_position
          data:
              position: >
                {{ [[state_attr(curtain_1,
                "current_position") + stepsize, 0] | max, 100] | min }}   
          entity_id: !input curtain1
        - service: cover.set_cover_position
          data:
              position: >
                {{ [[state_attr(curtain_2,
                "current_position") + stepsize, 0] | max, 100] | min }}   
          entity_id: !input curtain2




